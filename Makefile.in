# Makefile for uClibc
#
# Copyright (C) 2000-2008 Erik Andersen <andersen@uclibc.org>
#
# Licensed under the LGPL v2.1, see the file COPYING.LIB in this tarball.
#

#--------------------------------------------------------------
# You shouldn't need to mess with anything beyond this point...
#--------------------------------------------------------------
clean_targets := clean realclean distclean \
	objclean-y headers_clean-y CLEAN_utils
noconfig_targets := menuconfig config oldconfig silentoldconfig randconfig \
	defconfig allyesconfig allnoconfig \
	release dist tags help

include $(top_srcdir)Rules.mak
sub_headers := headers
ifndef KCONFIG_CONFIG
KCONFIG_CONFIG := $(top_builddir).config
endif
export KCONFIG_CONFIG

ifeq ($(HAVE_DOT_CONFIG),y)

all: pregen libs
libs: pregen

# In this section, we need .config
-include $(top_builddir).config.cmd

else # ifeq ($(HAVE_DOT_CONFIG),y)

all: menuconfig

headers:
	@echo "Need to make a config file first, run: make menuconfig"
	@false

endif # ifeq ($(HAVE_DOT_CONFIG),y)

include $(top_srcdir)ldso/Makefile.in
include $(top_srcdir)libcrypt/Makefile.in
include $(top_srcdir)libintl/Makefile.in
include $(top_srcdir)libm/Makefile.in
include $(top_srcdir)libnsl/Makefile.in
include $(top_srcdir)libresolv/Makefile.in
include $(top_srcdir)libutil/Makefile.in
include $(top_srcdir)libpthread/Makefile.in
include $(top_srcdir)librt/Makefile.in
include $(top_srcdir)libubacktrace/Makefile.in
include $(top_srcdir)extra/locale/Makefile.in

# last included to catch all the objects added by others (locales/threads)
include $(top_srcdir)libc/Makefile.in

ifeq ($(HAVE_DOT_CONFIG),y)
# If the .config changes then we have to make sure that our includes are
# updated properly. This would normally work by saying that the headers
# have uClibc_config.h as prerequisite but since we _symlink_ the headers
# and do not (?) want to rely on 'make -L' we better update them right here,
# on spot to save us from alot of hazzle.
$(top_builddir)include/bits/uClibc_config.h: $(top_builddir)extra/config/conf $(KCONFIG_CONFIG) $(top_srcdir)extra/scripts/conf-header.sh | $(top_builddir)include/bits $(top_builddir)include/config
	@$(disp_gen)
	$(Q)@$< -s $(top_srcdir)extra/Configs/Config.in
	$(Q)$(top_srcdir)extra/scripts/conf-header.sh $(KCONFIG_CONFIG) > $@
	$(Q)$(MAKE) headers-y

# The above doesn't work for threads, though. Just using check-symlinks for now.
# XXX: FIXME: this is ugly
MAKEFLAGS += -L

$(top_builddir)include/config/linuxthreads/old.h $(top_builddir)include/config/linuxthreads/new.h:
	@true

# For the moment, we have to keep re-running this target
# because the fix includes scripts rely on pre-processers
# in order to generate the headers correctly :(.  That
# means we can't use the $(HOSTCC) in order to get the
# correct output.
ifeq ($(ARCH_USE_MMU),y)
export header_extra_args =
else
export header_extra_args = -n
endif
HEADERS_BITS_COMMON := $(notdir $(wildcard $(top_srcdir)libc/sysdeps/linux/common/bits/*.h))
HEADERS_BITS_ARCH   := $(notdir $(wildcard $(top_srcdir)libc/sysdeps/linux/$(TARGET_ARCH)/bits/*.h))
HEADERS_BITS_SUBARCH :=
ifneq ($(TARGET_SUBARCH),)
HEADERS_BITS_SUBARCH := $(notdir $(wildcard $(top_srcdir)libc/sysdeps/linux/$(TARGET_ARCH)/bits/$(TARGET_SUBARCH)/*.h))
endif
HEADERS_BITS_COMMON := $(filter-out $(HEADERS_BITS_ARCH) $(HEADERS_BITS_SUBARCH) $(HEADERS_BITS_PTHREAD),$(HEADERS_BITS_COMMON))

HEADERS_SYS_COMMON := $(notdir $(wildcard $(top_srcdir)libc/sysdeps/linux/common/sys/*.h))
HEADERS_SYS_ARCH := $(notdir $(wildcard $(top_srcdir)libc/sysdeps/linux/$(TARGET_ARCH)/sys/*.h))
HEADERS_SYS_COMMON := $(filter-out $(HEADERS_SYS_ARCH),$(HEADERS_SYS_COMMON))

ALL_HEADERS_COMMON       := $(top_builddir)include/fpu_control.h \
				$(top_builddir)include/dl-osinfo.h \
				$(top_builddir)include/hp-timing.h
ALL_HEADERS_BITS_COMMON  := $(addprefix $(top_builddir)include/bits/,$(HEADERS_BITS_COMMON))
ALL_HEADERS_BITS_ARCH    := $(addprefix $(top_builddir)include/bits/,$(HEADERS_BITS_ARCH))
ifneq ($(TARGET_SUBARCH),)
ALL_HEADERS_BITS_SUBARCH := $(addprefix $(top_builddir)include/bits/,$(HEADERS_BITS_SUBARCH))
else
ALL_HEADERS_BITS_SUBARCH :=
endif
ALL_HEADERS_SYS_COMMON   := $(addprefix $(top_builddir)include/sys/,$(HEADERS_SYS_COMMON))
ALL_HEADERS_SYS_ARCH     := $(addprefix $(top_builddir)include/sys/,$(HEADERS_SYS_ARCH))

target-headers-sysdep := \
	$(ALL_HEADERS_COMMON) \
	$(ALL_HEADERS_BITS_COMMON) \
	$(ALL_HEADERS_BITS_ARCH) \
	$(ALL_HEADERS_BITS_SUBARCH) \
	$(ALL_HEADERS_SYS_COMMON) \
	$(ALL_HEADERS_SYS_ARCH) \
	$(ALL_HEADERS_BITS_PTHREAD)

$(top_builddir)include/fpu_control.h:
	@$(disp_ln)
	$(Q)[ -r $(top_srcdir)libc/sysdeps/linux/$(TARGET_ARCH)/$(@F) ] && \
		$(LN) -fs $(call rel_srcdir)libc/sysdeps/linux/$(TARGET_ARCH)/$(@F) $@ || \
		$(LN) -fs $(call rel_srcdir)libc/sysdeps/linux/common/$(@F) $@

$(top_builddir)include/dl-osinfo.h $(top_builddir)include/hp-timing.h:
	$(do_ln) $(call rel_srcdir)libc/sysdeps/linux/common/$(@F) $@

$(ALL_HEADERS_BITS_COMMON):
	$(do_ln) $(call rel_srcdir)libc/sysdeps/linux/common/bits/$(@F) $@

$(ALL_HEADERS_BITS_ARCH):
	$(do_ln) $(call rel_srcdir)libc/sysdeps/linux/$(TARGET_ARCH)/bits/$(@F) $@

ifneq ($(TARGET_SUBARCH),)
$(ALL_HEADERS_BITS_SUBARCH):
	$(do_ln) $(call rel_srcdir)libc/sysdeps/linux/$(TARGET_ARCH)/bits/$(TARGET_SUBARCH)/$(@F) $@
endif

ifneq ($(strip $(ALL_HEADERS_SYS_COMMON)),)
$(ALL_HEADERS_SYS_COMMON):
	$(do_ln) $(call rel_srcdir)libc/sysdeps/linux/common/sys/$(@F) $@
endif

ifneq ($(strip $(ALL_HEADERS_SYS_ARCH)),)
$(ALL_HEADERS_SYS_ARCH):
	$(do_ln) $(call rel_srcdir)libc/sysdeps/linux/$(TARGET_ARCH)/sys/$(@F) $@
endif

$(target-headers-sysdep) $(pregen-headers-y): | $(top_builddir)include/bits $(top_builddir)include/sys

HEADERCLEAN_common:
	$(do_rm) $(ALL_HEADERS_COMMON)
headers_clean-y += HEADERCLEAN_common

# The headers. Arch specific headers are specified via ARCH_HEADERS in
# libc/sysdeps/linux/$(TARGET_ARCH)/Makefile.arch which appends those via
# libc/sysdeps/linux/Makefile.commonarch to headers-y
headers-y += $(target-headers-sysdep)

headers: $(top_builddir)include/bits/uClibc_config.h $(top_builddir)include/bits/sysnum.h | subdirs
subdirs: $(addprefix $(top_builddir),$(subdirs))
pregen-headers: $(pregen-headers-y)
pregen: pregen-headers
	$(Q)$(if $(UCLIBC_HAS_LOCALE),$(MAKE) -C extra/locale locale_headers)
$(top_builddir)include/bits/sysnum.h: $(top_srcdir)extra/scripts/gen_bits_syscall_h.sh | $(top_builddir)include/bits
	@$(disp_gen)
	$(Q)set -e; \
	tmp=`mktemp $(top_builddir)include/bits/sysnum.h.XXXXXX 2>/dev/null || true`; \
	[ -z "$$tmp" ] && tmp='$(top_builddir)include/bits/sysnum.h.new'; \
	KERNEL_HEADERS="${KERNEL_HEADERS}" top_builddir="$(top_builddir)" CC="$(CC) $(CPU_CFLAGS)" $(SHELL) $< > $$tmp; \
	if cmp $(top_builddir)include/bits/sysnum.h $$tmp >/dev/null 2>&1; then \
		$(RM) $$tmp; \
	else \
		mv -f $$tmp $(top_builddir)include/bits/sysnum.h; \
	fi
	@# Ugly linux specific hack..
	$(Q)if grep -q __NR_ $@; then true; else \
		rm -f $@; \
		echo "ERROR: Could not generate syscalls."; \
		echo "Make sure that you have proper kernel headers."; \
		echo "Your .config in KERNEL_HEADERS=\"\" was set to:"; \
		echo "${KERNEL_HEADERS}"; \
		exit 1; \
	fi

$(LOCAL_INSTALL_PATH):
	$(Q)$(MAKE) PREFIX=$(shell pwd)/$(LOCAL_INSTALL_PATH) RUNTIME_PREFIX=/ \
	DEVEL_PREFIX=/usr/ \
	HOSTCC="$(HOSTCC)" \
	install

install: install_runtime install_dev


RUNTIME_PREFIX_LIB_FROM_DEVEL_PREFIX_LIB=$(shell $(top_srcdir)extra/scripts/relative_path.sh $(DEVEL_PREFIX)$(MULTILIB_DIR) $(RUNTIME_PREFIX)$(MULTILIB_DIR))

startfiles: $(crt-y)

$(top_builddir)extra/scripts/unifdef: |$(top_builddir)extra/scripts
$(top_builddir)extra/scripts/unifdef: $(top_srcdir)extra/scripts/unifdef.c
	$(hcompile.u)

# Installs header files.
# a "y" here means the feature is enabled and so we should *not* rm it.
# if the option expands to nothing though, we can punt the headers.
HEADERS_RM- := \
	internal \
	dl-osinfo.h \
	_lfs_64.h \
	bits/uClibc_arch_features.h \
	bits/kernel_sigaction.h \
	bits/kernel_stat.h \
	bits/kernel_types.h \
	bits/syscalls.h \
	bits/syscalls-common.h \
	bits/uClibc_errno.h \
	bits/uClibc_uintmaxtostr.h \
	bits/sigcontextinfo.h \
	bits/stackinfo.h \
	tls.h \
	rpc/des_crypt.h \
	rpc/key_prot.h \
	rpc/rpc_des.h
HEADERS_RM-$(HAVE_SHARED)                    += dlfcn.h bits/dlfcn.h
HEADERS_RM-$(PTHREADS_DEBUG_SUPPORT)         += thread_db.h
HEADERS_RM-$(UCLIBC_HAS_BSD_ERR)             += err.h
HEADERS_RM-$(UCLIBC_HAS_CRYPT)               += crypt.h
HEADERS_RM-$(UCLIBC_HAS_EPOLL)               += sys/epoll.h
HEADERS_RM-$(UCLIBC_HAS_FENV)                += fenv.h bits/fenv.h bits/fenvinline.h
HEADERS_RM-$(UCLIBC_HAS_FLOATS)              += complex.h fpu_control.h ieee754.h \
	math.h \
	tgmath.h \
	bits/uClibc_fpmax.h \
	bits/math*.h
HEADERS_RM-$(findstring y,$(UCLIBC_HAS_FTW)$(UCLIBC_HAS_NFTW))  += ftw.h
HEADERS_RM-$(UCLIBC_HAS_GETTEXT_AWARENESS)   += libintl.h
HEADERS_RM-$(UCLIBC_HAS_GLIBC_CUSTOM_PRINTF) += printf.h
HEADERS_RM-$(UCLIBC_HAS_GLOB)                += glob.h
HEADERS_RM-$(UCLIBC_HAS_GNU_ERROR)           += error.h
HEADERS_RM-$(UCLIBC_HAS_GNU_GETOPT)$(UCLIBC_HAS_GETOPT_LONG) += getopt.h
HEADERS_RM-$(UCLIBC_HAS_IPV6)                += netinet/ip6.h netinet/icmp6.h
HEADERS_RM-$(UCLIBC_HAS_BACKTRACE)           += execinfo.h
HEADERS_RM-$(UCLIBC_HAS_LOCALE)              += iconv.h
HEADERS_RM-$(UCLIBC_HAS_PTY)                 += pty.h
HEADERS_RM-$(UCLIBC_HAS_REALTIME)            += mqueue.h bits/mqueue.h sched.h \
	bits/sched.h \
	semaphore.h
HEADERS_RM-$(UCLIBC_HAS_REGEX)               += regex.h regexp.h
HEADERS_RM-$(UCLIBC_HAS_RPC)                 += rpc
HEADERS_RM-$(UCLIBC_HAS_SHADOW)              += shadow.h
HEADERS_RM-$(UCLIBC_HAS_SOCKET)              += sys/socket.h bits/socket.h sys/socketvar.h
HEADERS_RM-$(UCLIBC_HAS_SYSLOG)              += syslog.h sys/syslog.h bits/syslog*.h
HEADERS_RM-$(UCLIBC_HAS_THREADS)             += *thread*.h semaphore.h \
	bits/*thread*.h \
	bits/initspin.h
HEADERS_RM-$(UCLIBC_HAS_THREADS_NATIVE)      += atomic.h bits/atomic.h
HEADERS_RM-$(UCLIBC_HAS_UTMPX)               += bits/utmpx.h utmpx.h
HEADERS_RM-$(UCLIBC_HAS_WCHAR)               += wchar.h wctype.h
HEADERS_RM-$(UCLIBC_HAS_WORDEXP)             += wordexp.h
HEADERS_RM-$(UCLIBC_HAS_XATTR)               += sys/xattr.h
HEADERS_RM-$(UCLIBC_HAS_XLOCALE)             += xlocale.h
HEADERS_RM-$(UCLIBC_LINUX_SPECIFIC)          += sys/fsuid.h sys/inotify.h sys/perm.h \
	sys/personality.h \
	sys/prctl.h \
	sys/reboot.h \
	sys/sendfile.h \
	sys/signalfd.h \
	bits/statfs.h \
	sys/statfs.h \
	sys/swap.h \
	sys/sysctl.h \
	sys/sysinfo.h \
	sys/vfs.h
HEADERS_RM-$(UCLIBC_SUPPORT_AI_ADDRCONFIG)   += ifaddrs.h
HEADERS_RM-$(UCLIBC_SV4_DEPRECATED)          += ustat.h sys/ustat.h bits/ustat.h
HEADERS_RM-$(UCLIBC_SUSV3_LEGACY)            += sys/timeb.h regexp.h
HEADERS_RM-$(UCLIBC_SUSV4_LEGACY)            += utime.h
	# BREAKAGE: include/signal.h uses it, this rm broke bbox compile:
	### ucontext.h

ifneq ($(findstring install,$(MAKECMDGOALS)),)
$(addprefix $(PREFIX)$(DEVEL_PREFIX),include lib):
	$(do_mkdir)
# avoid warning about duplicate targets in rule or overrides
ifneq ($(abspath $(RUNTIME_PREFIX)$(MULTILIB_DIR)),$(abspath $(DEVEL_PREFIX)lib))
$(PREFIX)$(RUNTIME_PREFIX)$(MULTILIB_DIR):
	$(do_mkdir)
endif
endif
install_headers: headers $(top_builddir)extra/scripts/unifdef | $(PREFIX)$(DEVEL_PREFIX)include
	@$(call disp_install,"include -> $(PREFIX)$(DEVEL_PREFIX)include")
	$(Q)top_builddir=$(top_builddir) \
	$(top_srcdir)extra/scripts/install_headers.sh include $(PREFIX)$(DEVEL_PREFIX)include
	$(Q)cd $(PREFIX)$(DEVEL_PREFIX)include && $(RM) -r $(HEADERS_RM-)
ifeq ($(UCLIBC_HAS_WCHAR),)
	$(Q)cd $(PREFIX)$(DEVEL_PREFIX)include && mv -f wchar-stub.h wchar.h
else
	$(Q)cd $(PREFIX)$(DEVEL_PREFIX)include && $(RM) -f wchar-stub.h
endif

# Installs startfiles
install_startfiles: startfiles | $(PREFIX)$(DEVEL_PREFIX)$(MULTILIB_DIR)
	-$(INSTALL) -m 644 $(startfiles) $(PREFIX)$(DEVEL_PREFIX)$(MULTILIB_DIR)/

# Installs development library links.
install_dev: install_headers install_runtime install_startfiles | $(PREFIX)$(DEVEL_PREFIX)$(MULTILIB_DIR)
	-$(INSTALL) -m 644 $(top_builddir)lib/*.a $(PREFIX)$(DEVEL_PREFIX)$(MULTILIB_DIR)/
ifeq ($(HAVE_SHARED),y)
	for i in `cd $(top_builddir) && find lib/ -type l -name 'lib[a-zA-Z]*.so' | \
	$(SED) -e 's/lib\///'` ; do \
		$(LN) -sf $(RUNTIME_PREFIX_LIB_FROM_DEVEL_PREFIX_LIB)$$i.$(ABI_VERSION) \
		$(PREFIX)$(DEVEL_PREFIX)$(MULTILIB_DIR)/$$i; \
	done
ifeq ($(HARDWIRED_ABSPATH),y)
	if [ -f $(top_builddir)lib/libc.so -a -f $(PREFIX)$(RUNTIME_PREFIX)$(MULTILIB_DIR)/$(SHARED_LIBNAME) ] ; then \
		$(RM) $(PREFIX)$(DEVEL_PREFIX)$(MULTILIB_DIR)/libc.so; \
		$(SED) -e 's:$(NONSHARED_LIBNAME):$(DEVEL_PREFIX)$(MULTILIB_DIR)/$(NONSHARED_LIBNAME):' \
		    -e 's:$(SHARED_LIBNAME):$(RUNTIME_PREFIX)$(MULTILIB_DIR)/$(SHARED_LIBNAME):' \
		    -e 's:$(UCLIBC_LDSO):$(RUNTIME_PREFIX)$(MULTILIB_DIR)/$(UCLIBC_LDSO):' \
		    $(top_builddir)lib/libc.so > $(PREFIX)$(DEVEL_PREFIX)$(MULTILIB_DIR)/libc.so; \
	fi
else
	-$(INSTALL) -m 755 $(top_builddir)lib/libc.so $(PREFIX)$(DEVEL_PREFIX)$(MULTILIB_DIR)/
endif
ifeq ($(UCLIBC_HAS_BACKTRACE),y)
# Add the AS_NEEDED entry for libubacktrace.so
	if [ -f $(top_builddir)lib/libc.so -a -f $(PREFIX)$(RUNTIME_PREFIX)lib/$(SHARED_MAJORNAME) ] ; then \
		echo "GROUP ( $(UBACKTRACE_ASNEEDED) )" >> $(PREFIX)$(DEVEL_PREFIX)lib/libc.so; \
	fi
endif
ifeq ($(UCLIBC_HAS_THREADS),y)
ifneq ($(LINUXTHREADS_OLD),y)
ifeq ($(HARDWIRED_ABSPATH),y)
	if [ -f $(top_builddir)lib/libpthread.so -a -f $(PREFIX)$(RUNTIME_PREFIX)$(MULTILIB_DIR)/libpthread.so.$(ABI_VERSION) ] ; then \
		$(RM) $(PREFIX)$(DEVEL_PREFIX)$(MULTILIB_DIR)/libpthread.so; \
		cp $(top_srcdir)extra/scripts/format.lds $(PREFIX)$(DEVEL_PREFIX)$(MULTILIB_DIR)/libpthread.so; \
		echo "GROUP ( $(RUNTIME_PREFIX)$(MULTILIB_DIR)/libpthread.so.$(ABI_VERSION) $(DEVEL_PREFIX)$(MULTILIB_DIR)/libpthread_nonshared.a )" \
			>> $(PREFIX)$(DEVEL_PREFIX)$(MULTILIB_DIR)/libpthread.so; \
	fi
else
	-$(INSTALL) -m 755 $(top_builddir)lib/libpthread.so $(PREFIX)$(DEVEL_PREFIX)$(MULTILIB_DIR)/
endif
endif
endif
ifeq ($(PTHREADS_DEBUG_SUPPORT),y)
	$(LN) -sf $(RUNTIME_PREFIX_LIB_FROM_DEVEL_PREFIX_LIB)libthread_db.so.1 \
		$(PREFIX)$(DEVEL_PREFIX)$(MULTILIB_DIR)/libthread_db.so
endif
ifeq ($(DOPIC),y)
#	# If we build shared libraries then the static libs are PIC...
#	# Make _pic.a symlinks to make mklibs.py and similar tools happy.
	if [ -d $(top_builddir)lib ] ; then \
		for i in `cd $(top_builddir) && find lib/ -type f -name 'lib*.a' | $(SED) -e 's/lib\///'` ; do \
			$(LN) -sf $$i $(PREFIX)$(DEVEL_PREFIX)$(MULTILIB_DIR)/`echo $$i \
				| $(SED) -e 's/\.a$$/_pic.a/'`; \
		done ; \
	fi
endif
endif
ifeq ($(UCLIBC_FORMAT_SHARED_FLAT),y)
	for file in $(top_builddir)lib/lib*.gdb; do \
		if test -f $$file; then \
			$(INSTALL) -m 755 $$file $(PREFIX)$(DEVEL_PREFIX)$(MULTILIB_DIR); \
			$(INSTALL) -m 755 `echo $$file | $(SED) 's/\.gdb$$//'` \
			  $(PREFIX)$(DEVEL_PREFIX)$(MULTILIB_DIR); \
		fi; \
	done
endif

# Installs run-time libraries
install_runtime: all | $(PREFIX)$(RUNTIME_PREFIX)$(MULTILIB_DIR)
ifeq ($(HAVE_SHARED),y)
	$(INSTALL) -m 755 $(top_builddir)lib/lib*-$(VERSION).so \
		$(PREFIX)$(RUNTIME_PREFIX)$(MULTILIB_DIR)
	(cd $(top_builddir)lib && $(TAR) -cf - *.so.*) | $(TAR) -xf - -C $(PREFIX)$(RUNTIME_PREFIX)$(MULTILIB_DIR)
	@if [ -x $(top_builddir)lib/$(UCLIBC_LDSO_NAME)-$(VERSION).so ] ; then \
		set -e; \
		$(SHELL_SET_X); \
		$(INSTALL) -m 755 $(top_builddir)lib/$(UCLIBC_LDSO_NAME)-$(VERSION).so \
			$(PREFIX)$(RUNTIME_PREFIX)$(MULTILIB_DIR); \
	fi
endif

utils: | pregen
	$(Q)$(MAKE) CROSS="$(CROSS)" CC="$(CC)" -C utils $@

# Installs helper applications, such as 'ldd' and 'ldconfig'
install_utils: utils
	$(Q)$(MAKE) CROSS="$(CROSS)" CC="$(CC)" -C utils utils_install

endif # ifeq ($(HAVE_DOT_CONFIG),y)

hostutils: | pregen
	$(Q)$(MAKE) CROSS="$(CROSS)" CC="$(CC)" HOSTCC="$(HOSTCC)" DOTHOST=.host -C utils $@

install_hostutils: hostutils
	$(Q)$(MAKE) CROSS="$(CROSS)" CC="$(CC)" HOSTCC="$(HOSTCC)" DOTHOST=.host -C utils utils_install

$(addprefix $(top_builddir),include include/bits include/sys include/config lib extra/config/lxdialog extra/locale extra/scripts $(subdirs)):
	$(do_mkdir)

# configuration
# ---------------------------------------------------------------------------
$(top_builddir)extra/config/conf $(top_builddir)extra/config/mconf: | $(top_builddir)include/config $(top_builddir)extra/config/lxdialog
	$(Q)$(MAKE) -C extra/config $(@F)

menuconfig: $(top_builddir)extra/config/mconf
	$(Q)$(top_builddir)extra/config/mconf extra/Configs/Config.in

config: $(top_builddir)extra/config/conf
	$(Q)$(top_builddir)extra/config/conf extra/Configs/Config.in

oldconfig: $(top_builddir)extra/config/conf
	$(Q)$(top_builddir)extra/config/conf -o extra/Configs/Config.in

silentoldconfig: $(top_builddir)extra/config/conf
	$(Q)$(top_builddir)extra/config/conf -s extra/Configs/Config.in

randconfig: $(top_builddir)extra/config/conf
	$(Q)$(top_builddir)extra/config/conf -r extra/Configs/Config.in

allyesconfig: $(top_builddir)extra/config/conf
	$(Q)$(top_builddir)extra/config/conf -y extra/Configs/Config.in
	$(SED) -i -e "s/^DODEBUG=.*/# DODEBUG is not set/" \
		-e "s/^DOASSERTS=.*/# DOASSERTS is not set/" \
		-e "s/^SUPPORT_LD_DEBUG_EARLY=.*/# SUPPORT_LD_DEBUG_EARLY is not set/" \
		-e "s/^SUPPORT_LD_DEBUG=.*/# SUPPORT_LD_DEBUG is not set/" \
		-e "s/^UCLIBC_MJN3_ONLY=.*/# UCLIBC_MJN3_ONLY is not set/" \
		$(KCONFIG_CONFIG)
	$(Q)$(top_builddir)extra/config/conf -o extra/Configs/Config.in

allnoconfig: $(top_builddir)extra/config/conf
	$(Q)$(top_builddir)extra/config/conf -n extra/Configs/Config.in

defconfig: $(top_builddir)extra/config/conf
	$(Q)$(top_builddir)extra/config/conf -d extra/Configs/Config.in \
		-D extra/Configs/defconfigs/$(ARCH)

menuconfig-clean-y:
	$(Q)$(MAKE) -C extra/config CLEAN_extra/config

include_clean:
	$(Q)$(RM) $(top_builddir)include/fpu_control.h $(top_builddir)include/dl-osinfo.h $(top_builddir)include/hp-timing.h
	@set -e; \
	for i in `(cd libc/sysdeps/linux/common/sys; ls *.h)` ; do \
		$(RM) $(top_builddir)include/sys/$$i; \
	done; \
	if [ -d libc/sysdeps/linux/$(TARGET_ARCH)/sys ] ; then \
		for i in `(cd libc/sysdeps/linux/$(TARGET_ARCH)/sys; ls *.h)` ; do \
			$(RM) $(top_builddir)include/sys/$$i; \
		done; \
	fi

clean: include_clean
	$(Q)$(RM) -r $(top_builddir)lib $(top_builddir)include/bits
	@$(MAKE) -C utils CLEAN_utils
	+$(MAKE) -s -C test clean
	@$(RM) $(top_builddir)include/linux $(top_builddir)include/asm*
	$(Q)$(RM) $(top_builddir)extra/scripts/unifdef
	$(Q)$(RM) -r $(LOCAL_INSTALL_PATH)

distclean: clean
	-find . \( -name core -o -name \*.orig -o -name \*~ -o -name .\*.dep \) -exec $(RM) {} \;
	$(RM) $(top_builddir).config $(top_builddir).config.old $(top_builddir).config.cmd
	$(RM) $(top_builddir)extra/locale/*.tgz
	$(MAKE) -C extra/config distclean

dist release:
	$(RM) ../uClibc-$(VERSION).tar
	git archive HEAD --format=tar --prefix=uClibc-$(VERSION)/ \
		> ../uClibc-$(VERSION).tar
	cat ../uClibc-$(VERSION).tar | bzip2 -c9 > ../uClibc-$(VERSION).tar.bz2
	cat ../uClibc-$(VERSION).tar | xz -e -c8 > ../uClibc-$(VERSION).tar.xz
	du -b ../uClibc-$(VERSION).tar.{bz2,xz}

test check: test_compile
	$(Q)$(MAKE) -C test

test_compile: $(LOCAL_INSTALL_PATH)
	$(Q)$(MAKE) -C test compile
